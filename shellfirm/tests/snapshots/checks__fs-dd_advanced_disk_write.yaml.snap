---
source: shellfirm/tests/checks.rs
expression: test_file_results
snapshot_kind: text
---
[
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=file of=/dev/sda seek=1",
        check_detection_ids: [
            "fs:dd_block_device",
        ],
        test_description: "match writing at specific sector",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd  if=file  of=/dev/sda    seek=1",
        check_detection_ids: [
            "fs:dd_block_device",
        ],
        test_description: "match writing at specific sector with spaces",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd  seek=1   of=/dev/sda    if=file",
        check_detection_ids: [
            "fs:dd_block_device",
            "fs:dd_advanced_disk_write",
        ],
        test_description: "match writing at specific sector with spaces",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=file of=/dev/sda conv=notrunc",
        check_detection_ids: [
            "fs:dd_block_device",
        ],
        test_description: "match writing without truncating",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=/dev/sda of=file skip=1",
        check_detection_ids: [],
        test_description: "match reading from specific sector",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=file of=/dev/sda seek=2048 bs=512",
        check_detection_ids: [
            "fs:dd_block_device",
        ],
        test_description: "match writing at specific sector with block size",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=file of=/dev/sda conv=notrunc,noerror",
        check_detection_ids: [
            "fs:dd_block_device",
        ],
        test_description: "match writing with multiple conversion options",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=file of=/dev/sda seek=1 skip=1",
        check_detection_ids: [
            "fs:dd_block_device",
        ],
        test_description: "match writing with both seek and skip",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=file of=/dev/sda bs=4M seek=1",
        check_detection_ids: [
            "fs:dd_block_device",
        ],
        test_description: "match writing with large block size",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=file of=output.txt",
        check_detection_ids: [],
        test_description: "should not match regular file operations",
    },
    TestSensitivePatternsResult {
        file_path: "fs-dd_advanced_disk_write.yaml",
        test: "dd if=/dev/sda of=backup.img",
        check_detection_ids: [],
        test_description: "should not match reading from disk",
    },
]
